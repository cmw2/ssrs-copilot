@page "/chat"
@using SSRSCopilot.Web.Models
@inject ChatApiClient ChatClient
@rendermode InteractiveServer

<PageTitle>Report Chat</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-md-6 chat-panel">
            <h1>Report Chat</h1>
            <div class="chat-messages" id="chat-messages">
                @foreach (var message in messages)
                {
                    <div class="message @(message.IsUser ? "user-message" : "system-message")">
                        <div class="message-content">
                            @if (message.IsUser)
                            {
                                <strong>You:</strong>
                            }
                            else
                            {
                                <strong>Assistant:</strong>
                            }
                            <div>@((MarkupString)FormatMessage(message.Content))</div>
                        </div>
                        <div class="message-time">@message.Timestamp.ToString("t")</div>
                    </div>
                }
                @if (isLoading)
                {
                    <div class="message system-message">
                        <div class="message-content">
                            <div class="loading-indicator">
                                <span>Thinking</span>
                                <span class="dot">.</span>
                                <span class="dot">.</span>
                                <span class="dot">.</span>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="chat-input">
                <form @onsubmit="SendMessage" class="input-group">
                    <input type="text" @bind="currentMessage" class="form-control" placeholder="Type your message here..." disabled="@isLoading" />
                    <button type="submit" class="btn btn-primary" disabled="@(isLoading || string.IsNullOrWhiteSpace(currentMessage))">
                        <i class="bi bi-send"></i> Send
                    </button>
                </form>
            </div>
        </div>
        <div class="col-md-6 report-panel">
            <div class="report-container">
                @if (!string.IsNullOrEmpty(currentReportUrl))
                {
                    <iframe src="@currentReportUrl" class="report-iframe" allowfullscreen></iframe>
                }
                else
                {
                    <div class="empty-report">
                        <div class="empty-report-content">
                            <i class="bi bi-file-earmark-text" style="font-size: 48px;"></i>
                            <p>Your report will appear here after you select one through the chat.</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<ChatMessage> messages = new List<ChatMessage>
    {
        new ChatMessage { IsUser = false, Content = "Hello! I can help you run SSRS reports. What kind of report are you looking for today?" }
    };
    
    private string currentMessage = string.Empty;
    private string currentReportUrl = string.Empty;
    private string? sessionId = null;
    private bool isLoading = false;
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Generate a unique session ID for this chat session
            sessionId = Guid.NewGuid().ToString();
            // Initialize the chat
            ScrollToBottom();
        }
    }
    
    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || isLoading)
            return;
            
        var userMessage = currentMessage;
        
        // Add user message to the chat
        messages.Add(new ChatMessage { IsUser = true, Content = userMessage });
        
        // Clear the input field
        currentMessage = string.Empty;
        
        // Show loading indicator
        isLoading = true;
        
        // Force UI update
        StateHasChanged();
        
        // Scroll to bottom
        ScrollToBottom();
        
        try
        {
            // Send message to API
            var response = await ChatClient.SendMessageAsync(userMessage, sessionId);
            
            // Update session ID if it was generated by the server
            if (!string.IsNullOrEmpty(response.SessionId))
            {
                sessionId = response.SessionId;
            }
            
            // Add system response to the chat
            messages.Add(new ChatMessage { IsUser = false, Content = response.Message });
            
            // Update report URL if provided
            if (!string.IsNullOrEmpty(response.ReportUrl))
            {
                currentReportUrl = response.ReportUrl;
            }
        }
        catch (Exception ex)
        {
            // Add error message to chat
            messages.Add(new ChatMessage 
            { 
                IsUser = false, 
                Content = $"I'm sorry, but I encountered an error: {ex.Message}. Please try again." 
            });
        }
        finally
        {
            // Hide loading indicator
            isLoading = false;
            
            // Force UI update
            StateHasChanged();
            
            // Scroll to bottom
            ScrollToBottom();
        }
    }
    
    private string FormatMessage(string content)
    {
        // Convert line breaks to HTML breaks
        return content.Replace("\n", "<br>");
    }
    
    private void ScrollToBottom()
    {
        // JavaScript interop to scroll the chat to the bottom
        // In a real implementation, you would use JS Interop here
        // For simplicity, we're not implementing the actual JS call
    }
}

<style>
    .container {
        max-width: 1400px;
        margin: 0 auto;
    }
    
    .chat-panel {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 100px);
    }
    
    .chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        background-color: #f8f9fa;
        margin-bottom: 1rem;
    }
    
    .message {
        padding: 0.75rem;
        border-radius: 0.5rem;
        max-width: 80%;
    }
    
    .user-message {
        align-self: flex-end;
        background-color: #007bff;
        color: white;
    }
    
    .system-message {
        align-self: flex-start;
        background-color: #e9ecef;
        color: #212529;
    }
    
    .message-content {
        margin-bottom: 0.25rem;
    }
    
    .message-time {
        font-size: 0.75rem;
        text-align: right;
        opacity: 0.8;
    }
    
    .chat-input {
        padding: 1rem 0;
    }
    
    .report-panel {
        height: calc(100vh - 100px);
    }
    
    .report-container {
        height: 100%;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        overflow: hidden;
    }
    
    .report-iframe {
        width: 100%;
        height: 100%;
        border: none;
    }
    
    .empty-report {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        background-color: #f8f9fa;
        color: #6c757d;
    }
    
    .empty-report-content {
        text-align: center;
        padding: 2rem;
    }
    
    .loading-indicator {
        display: inline-block;
    }
    
    .dot {
        animation: dot-animation 1.4s infinite;
        opacity: 0;
    }
    
    .dot:nth-child(2) {
        animation-delay: 0.2s;
    }
    
    .dot:nth-child(3) {
        animation-delay: 0.4s;
    }
    
    @@keyframes dot-animation {
        0% { opacity: 0; }
        20% { opacity: 0; }
        50% { opacity: 1; }
        100% { opacity: 0; }
    }
</style>
