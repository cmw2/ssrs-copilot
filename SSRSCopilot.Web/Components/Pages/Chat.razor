@page "/"
@page "/chat"
@using SSRSCopilot.Web.Models
@using SSRSCopilot.Web.Services
@inject ChatApiClient ChatClient
@inject IJSRuntime JSRuntime
@inject ErrorLogger ErrorLogger
@rendermode InteractiveServer

<PageTitle>SSRS Copilot</PageTitle>

<ErrorBoundary>
    <ChildContent>
        <div class="container">
            <div class="row">
                <div class="col-md-6 chat-panel">
                    <div class="chat-messages" id="chat-messages">
                        @foreach (var message in messages)
                        {
                            <div class="message @(message.IsUser ? "user-message" : "system-message")">
                                <div class="message-content">
                                    @if (message.IsUser)
                                    {
                                        <strong>You:</strong>
                                    }
                                    else
                                    {
                                        <strong>Assistant:</strong>
                                    }
                                    <div>@((MarkupString)FormatMessage(message.Content))</div>
                                </div>
                                <div class="message-time">@message.Timestamp.ToString("t")</div>
                            </div>
                        }
                        @if (isLoading)
                        {
                            <div class="message system-message">
                                <div class="message-content">
                                    <div class="loading-indicator">
                                        <span>Thinking</span>
                                        <span class="dot">.</span>
                                        <span class="dot">.</span>
                                        <span class="dot">.</span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="chat-input">
                        <form @onsubmit="SendMessage" class="input-group">
                            <input type="text" @bind-value="currentMessage" @bind-value:event="oninput" class="form-control" placeholder="Type your message here..." disabled="@isLoading" @ref="messageInputRef" />
                            <button type="submit" class="btn btn-primary" disabled="@(isLoading || string.IsNullOrWhiteSpace(currentMessage))">
                                <i class="bi bi-send"></i> Send
                            </button>
                        </form>
                    </div>
                </div>
                <div class="col-md-6 report-panel">
                    <div class="report-container" id="report-container">
                        @if (string.IsNullOrEmpty(currentReportUrl))
                        {
                            <div class="empty-report">
                                <div class="empty-report-content">
                                    <i class="bi bi-file-earmark-text" style="font-size: 48px;"></i>
                                    <p>Your report will appear here after you select one through the chat.</p>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div id="report-iframe-container" class="report-iframe-container" style="width:100%; height:100%; position:relative;"></div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </ChildContent>
    <ErrorContent Context="exception">
        <div class="alert alert-danger m-4">
            <h4>We're sorry, but an error occurred</h4>
            <p>Please try refreshing the page. If the problem persists, contact support.</p>
            <button class="btn btn-primary" @onclick="ReloadPage">Reload Page</button>
        </div>
        @{
            ErrorLogger.LogError(exception, "Chat component");
        }
    </ErrorContent>
</ErrorBoundary>

@code {
    private List<ChatMessage> messages = new List<ChatMessage>
    {
        new ChatMessage { IsUser = false, Content = "Hello! I can help you run SSRS reports. What kind of report are you looking for today?" }
    };
    
    private string currentMessage = string.Empty;
    private string currentReportUrl = string.Empty;
    private string? sessionId = null;
    private bool isLoading = false;
    private bool _jsModuleLoaded = false;
    private ElementReference messageInputRef;
    
    private async Task ReloadPage()
    {
        await JSRuntime.InvokeVoidAsync("location.reload");
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Generate a unique session ID for this chat session
            sessionId = Guid.NewGuid().ToString();
            // Initialize the chat
            await ScrollToBottom();
            await EnsureJsModuleLoaded();
        }
    }
    
    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || isLoading)
            return;
            
        var userMessage = currentMessage;
        
        // Add user message to the chat
        messages.Add(new ChatMessage { IsUser = true, Content = userMessage });
        
        // Clear the input field
        currentMessage = string.Empty;
        
        // Show loading indicator
        isLoading = true;
        
        // Force UI update
        StateHasChanged();
        
        // Scroll to bottom
        await ScrollToBottom();
        
        try
        {
            // Send message to API
            var response = await ChatClient.SendMessageAsync(userMessage, sessionId);
            
            // Update session ID if it was generated by the server
            if (!string.IsNullOrEmpty(response.SessionId))
            {
                sessionId = response.SessionId;
            }
            
            // Add system response to the chat
            messages.Add(new ChatMessage { IsUser = false, Content = response.Message });
            
            // Update report URL if provided
            if (!string.IsNullOrEmpty(response.ReportUrl))
            {
                currentReportUrl = response.ReportUrl;
                // Force UI update before displaying report
                StateHasChanged();
                await Task.Delay(100); // Give the DOM time to update
                await DisplayReport(response.ReportUrl);
            }
        }
        catch (Exception ex)
        {
            // Add error message to chat
            messages.Add(new ChatMessage 
            { 
                IsUser = false, 
                Content = $"I'm sorry, but I encountered an error: {ex.Message}. Please try again." 
            });
        }
        finally
        {
            // Hide loading indicator
            isLoading = false;
            // Force UI update
            StateHasChanged();
            
            // Scroll to bottom
            await ScrollToBottom();
            
            // Focus the input field
            await FocusInput();
        }
    }
    
    private async Task EnsureJsModuleLoaded()
    {
        if (!_jsModuleLoaded)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("import", "./js/reportUtils.js");
                _jsModuleLoaded = true;
            }
            catch (Exception ex)
            {
                // If module loading fails, log the error and continue
                ErrorLogger.LogError(ex, "Loading reportUtils.js module");
                await ErrorLogger.LogErrorToConsole($"Error loading JS module: {ex.Message}");
                _jsModuleLoaded = false;
            }
        }
    }
    
    private async Task DisplayReport(string reportUrl)
    {
        try
        {
            // Log that we're attempting to display a report
            await ErrorLogger.LogErrorToConsole($"Attempting to display report: {reportUrl}");
            
            // Update UI to show we have a report URL
            StateHasChanged();
            
            await EnsureJsModuleLoaded();
            if (_jsModuleLoaded)
            {
                await ErrorLogger.TryExecuteJsAsync(
                    async () => await JSRuntime.InvokeVoidAsync("reportUtils.displayReport", "report-iframe-container", reportUrl),
                    "Displaying report with reportUtils"
                );
            }
            else
            {
                // Fallback if JS module loading failed - use direct DOM manipulation
                await ErrorLogger.TryExecuteJsAsync(
                    async () => await JSRuntime.InvokeVoidAsync("eval", $@"
                        const container = document.getElementById('report-iframe-container');
                        if (container) {{
                            // Safely clear the container
                            container.innerHTML = '';
                            
                            // Determine if this is a PDF
                            const isPdf = '{reportUrl}'.toLowerCase().endsWith('.pdf') || 
                                        '{reportUrl}'.toLowerCase().includes('format=pdf') ||
                                        '{reportUrl}'.toLowerCase().includes('/pdf');
                            
                            let url = '{reportUrl}';
                            // For PDFs, add parameters to ensure proper scaling
                            if (isPdf) {{
                                url = url + '#view=Fit&zoom=page-fit';
                            }}
                            
                            const iframe = document.createElement('iframe');
                            iframe.setAttribute('src', url);
                            iframe.setAttribute('class', 'report-iframe');
                            iframe.setAttribute('allowfullscreen', 'true');
                            iframe.setAttribute('scrolling', 'auto');
                            
                            // Set inline styles for better iframe sizing
                            iframe.style.width = '100%';
                            iframe.style.height = '100%';
                            iframe.style.position = 'absolute';
                            iframe.style.top = '0';
                            iframe.style.left = '0';
                            iframe.style.right = '0';
                            iframe.style.bottom = '0';
                            
                            // Add event listener to adjust iframe size when content loads
                            iframe.onload = function() {{
                                console.log('Iframe loaded via fallback');
                                // Force a resize
                                setTimeout(() => {{
                                    iframe.style.height = '100%';
                                }}, 100);
                            }};
                            
                            container.appendChild(iframe);
                        }}
                    "),
                    "Displaying report with fallback"
                );
            }
        }
        catch (Exception ex)
        {
            // Handle any errors that occur during report display
            ErrorLogger.LogError(ex, "DisplayReport");
            
            // Add error message to chat
            messages.Add(new ChatMessage 
            { 
                IsUser = false, 
                Content = $"I'm sorry, but I encountered an error displaying the report. Please try again." 
            });
            StateHasChanged();
        }
    }
    
    private string FormatMessage(string content)
    {
        // Convert line breaks to HTML breaks
        return content.Replace("\n", "<br>");
    }
    
    private async Task ScrollToBottom()
    {
        try
        {
            // JavaScript interop to scroll the chat to the bottom
            // First try to use the reportUtils module if loaded
            if (_jsModuleLoaded)
            {
                try
                {
                    await JSRuntime.InvokeVoidAsync("reportUtils.scrollToBottom", "chat-messages");
                    return;
                }
                catch (Exception ex)
                {
                    // Fall back to using the global function if module method fails
                    ErrorLogger.LogError(ex, "ScrollToBottom with reportUtils");
                }
            }
            
            // Fall back to the global scrollToBottom function
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-messages");
        }
        catch (Exception ex)
        {
            // Log the error but don't crash the application for scrolling issues
            ErrorLogger.LogError(ex, "ScrollToBottom fallback");
            await ErrorLogger.LogErrorToConsole("Failed to scroll chat to bottom");
        }
    }
    
    private async Task FocusInput()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('{messageInputRef.Id}')?.focus()");
        }
        catch (Exception ex)
        {
            // Log the error but don't crash the application
            ErrorLogger.LogError(ex, "FocusInput");
            await ErrorLogger.LogErrorToConsole("Failed to set focus to input field");
        }
    }
}
